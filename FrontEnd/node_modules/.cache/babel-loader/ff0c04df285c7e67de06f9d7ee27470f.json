{"ast":null,"code":"/*\n\nBased off glamor's StyleSheet, thanks Sunil ❤️\n\nhigh performance StyleSheet for css-in-js systems\n\n- uses multiple style tags behind the scenes for millions of rules\n- uses `insertRule` for appending in production for *much* faster performance\n\n// usage\n\nimport { StyleSheet } from '@emotion/sheet'\n\nlet styleSheet = new StyleSheet({ key: '', container: document.head })\n\nstyleSheet.insert('#box { border: 1px solid red; }')\n- appends a css rule into the stylesheet\n\nstyleSheet.flush()\n- empties the stylesheet of all its contents\n\n*/\n// $FlowFixMe\nfunction sheetForTag(tag) {\n  if (tag.sheet) {\n    // $FlowFixMe\n    return tag.sheet;\n  } // this weirdness brought to you by firefox\n\n  /* istanbul ignore next */\n\n\n  for (var i = 0; i < document.styleSheets.length; i++) {\n    if (document.styleSheets[i].ownerNode === tag) {\n      // $FlowFixMe\n      return document.styleSheets[i];\n    }\n  }\n}\n\nfunction createStyleElement(options) {\n  var tag = document.createElement('style');\n  tag.setAttribute('data-emotion', options.key);\n\n  if (options.nonce !== undefined) {\n    tag.setAttribute('nonce', options.nonce);\n  }\n\n  tag.appendChild(document.createTextNode(''));\n  return tag;\n}\n\nvar StyleSheet = /*#__PURE__*/function () {\n  function StyleSheet(options) {\n    this.isSpeedy = options.speedy === undefined ? process.env.NODE_ENV === 'production' : options.speedy;\n    this.tags = [];\n    this.ctr = 0;\n    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets\n\n    this.key = options.key;\n    this.container = options.container;\n    this.before = null;\n  }\n\n  var _proto = StyleSheet.prototype;\n\n  _proto.insert = function insert(rule) {\n    // the max length is how many rules we have per style tag, it's 65000 in speedy mode\n    // it's 1 in dev because we insert source maps that map a single rule to a location\n    // and you can only have one source map per style tag\n    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {\n      var _tag = createStyleElement(this);\n\n      var before;\n\n      if (this.tags.length === 0) {\n        before = this.before;\n      } else {\n        before = this.tags[this.tags.length - 1].nextSibling;\n      }\n\n      this.container.insertBefore(_tag, before);\n      this.tags.push(_tag);\n    }\n\n    var tag = this.tags[this.tags.length - 1];\n\n    if (this.isSpeedy) {\n      var sheet = sheetForTag(tag);\n\n      try {\n        // this is a really hot path\n        // we check the second character first because having \"i\"\n        // as the second character will happen less often than\n        // having \"@\" as the first character\n        var isImportRule = rule.charCodeAt(1) === 105 && rule.charCodeAt(0) === 64; // this is the ultrafast version, works across browsers\n        // the big drawback is that the css won't be editable in devtools\n\n        sheet.insertRule(rule, // we need to insert @import rules before anything else\n        // otherwise there will be an error\n        // technically this means that the @import rules will\n        // _usually_(not always since there could be multiple style tags)\n        // be the first ones in prod and generally later in dev\n        // this shouldn't really matter in the real world though\n        // @import is generally only used for font faces from google fonts and etc.\n        // so while this could be technically correct then it would be slower and larger\n        // for a tiny bit of correctness that won't matter in the real world\n        isImportRule ? 0 : sheet.cssRules.length);\n      } catch (e) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\"There was a problem inserting the following rule: \\\"\" + rule + \"\\\"\", e);\n        }\n      }\n    } else {\n      tag.appendChild(document.createTextNode(rule));\n    }\n\n    this.ctr++;\n  };\n\n  _proto.flush = function flush() {\n    // $FlowFixMe\n    this.tags.forEach(function (tag) {\n      return tag.parentNode.removeChild(tag);\n    });\n    this.tags = [];\n    this.ctr = 0;\n  };\n\n  return StyleSheet;\n}();\n\nexport { StyleSheet };","map":{"version":3,"names":["sheetForTag","tag","sheet","i","document","styleSheets","length","ownerNode","createStyleElement","options","createElement","setAttribute","key","nonce","undefined","appendChild","createTextNode","StyleSheet","isSpeedy","speedy","process","env","NODE_ENV","tags","ctr","container","before","_proto","prototype","insert","rule","_tag","nextSibling","insertBefore","push","isImportRule","charCodeAt","insertRule","cssRules","e","console","warn","flush","forEach","parentNode","removeChild"],"sources":["/Users/janhavi/Real-Time-Recs-UKDale/FrontEnd/node_modules/@emotion/sheet/dist/sheet.browser.esm.js"],"sourcesContent":["/*\n\nBased off glamor's StyleSheet, thanks Sunil ❤️\n\nhigh performance StyleSheet for css-in-js systems\n\n- uses multiple style tags behind the scenes for millions of rules\n- uses `insertRule` for appending in production for *much* faster performance\n\n// usage\n\nimport { StyleSheet } from '@emotion/sheet'\n\nlet styleSheet = new StyleSheet({ key: '', container: document.head })\n\nstyleSheet.insert('#box { border: 1px solid red; }')\n- appends a css rule into the stylesheet\n\nstyleSheet.flush()\n- empties the stylesheet of all its contents\n\n*/\n// $FlowFixMe\nfunction sheetForTag(tag) {\n  if (tag.sheet) {\n    // $FlowFixMe\n    return tag.sheet;\n  } // this weirdness brought to you by firefox\n\n  /* istanbul ignore next */\n\n\n  for (var i = 0; i < document.styleSheets.length; i++) {\n    if (document.styleSheets[i].ownerNode === tag) {\n      // $FlowFixMe\n      return document.styleSheets[i];\n    }\n  }\n}\n\nfunction createStyleElement(options) {\n  var tag = document.createElement('style');\n  tag.setAttribute('data-emotion', options.key);\n\n  if (options.nonce !== undefined) {\n    tag.setAttribute('nonce', options.nonce);\n  }\n\n  tag.appendChild(document.createTextNode(''));\n  return tag;\n}\n\nvar StyleSheet =\n/*#__PURE__*/\nfunction () {\n  function StyleSheet(options) {\n    this.isSpeedy = options.speedy === undefined ? process.env.NODE_ENV === 'production' : options.speedy;\n    this.tags = [];\n    this.ctr = 0;\n    this.nonce = options.nonce; // key is the value of the data-emotion attribute, it's used to identify different sheets\n\n    this.key = options.key;\n    this.container = options.container;\n    this.before = null;\n  }\n\n  var _proto = StyleSheet.prototype;\n\n  _proto.insert = function insert(rule) {\n    // the max length is how many rules we have per style tag, it's 65000 in speedy mode\n    // it's 1 in dev because we insert source maps that map a single rule to a location\n    // and you can only have one source map per style tag\n    if (this.ctr % (this.isSpeedy ? 65000 : 1) === 0) {\n      var _tag = createStyleElement(this);\n\n      var before;\n\n      if (this.tags.length === 0) {\n        before = this.before;\n      } else {\n        before = this.tags[this.tags.length - 1].nextSibling;\n      }\n\n      this.container.insertBefore(_tag, before);\n      this.tags.push(_tag);\n    }\n\n    var tag = this.tags[this.tags.length - 1];\n\n    if (this.isSpeedy) {\n      var sheet = sheetForTag(tag);\n\n      try {\n        // this is a really hot path\n        // we check the second character first because having \"i\"\n        // as the second character will happen less often than\n        // having \"@\" as the first character\n        var isImportRule = rule.charCodeAt(1) === 105 && rule.charCodeAt(0) === 64; // this is the ultrafast version, works across browsers\n        // the big drawback is that the css won't be editable in devtools\n\n        sheet.insertRule(rule, // we need to insert @import rules before anything else\n        // otherwise there will be an error\n        // technically this means that the @import rules will\n        // _usually_(not always since there could be multiple style tags)\n        // be the first ones in prod and generally later in dev\n        // this shouldn't really matter in the real world though\n        // @import is generally only used for font faces from google fonts and etc.\n        // so while this could be technically correct then it would be slower and larger\n        // for a tiny bit of correctness that won't matter in the real world\n        isImportRule ? 0 : sheet.cssRules.length);\n      } catch (e) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\"There was a problem inserting the following rule: \\\"\" + rule + \"\\\"\", e);\n        }\n      }\n    } else {\n      tag.appendChild(document.createTextNode(rule));\n    }\n\n    this.ctr++;\n  };\n\n  _proto.flush = function flush() {\n    // $FlowFixMe\n    this.tags.forEach(function (tag) {\n      return tag.parentNode.removeChild(tag);\n    });\n    this.tags = [];\n    this.ctr = 0;\n  };\n\n  return StyleSheet;\n}();\n\nexport { StyleSheet };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}