{"ast":null,"code":"/** @license React v0.18.0\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function () {\n    'use strict';\n\n    Object.defineProperty(exports, '__esModule', {\n      value: true\n    });\n    var enableSchedulerDebugging = false;\n    var enableIsInputPending = false;\n    var enableProfiling = true;\n\n    var _requestHostCallback;\n\n    var requestHostTimeout;\n    var cancelHostTimeout;\n    var shouldYieldToHost;\n    var requestPaint;\n\n    if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n    // implementation using setTimeout.\n    typeof window === 'undefined' || // Check if MessageChannel is supported, too.\n    typeof MessageChannel !== 'function') {\n      // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n      // fallback to a naive implementation.\n      var _callback = null;\n      var _timeoutID = null;\n\n      var _flushCallback = function _flushCallback() {\n        if (_callback !== null) {\n          try {\n            var currentTime = exports.unstable_now();\n            var hasRemainingTime = true;\n\n            _callback(hasRemainingTime, currentTime);\n\n            _callback = null;\n          } catch (e) {\n            setTimeout(_flushCallback, 0);\n            throw e;\n          }\n        }\n      };\n\n      var initialTime = Date.now();\n\n      exports.unstable_now = function () {\n        return Date.now() - initialTime;\n      };\n\n      _requestHostCallback = function requestHostCallback(cb) {\n        if (_callback !== null) {\n          // Protect against re-entrancy.\n          setTimeout(_requestHostCallback, 0, cb);\n        } else {\n          _callback = cb;\n          setTimeout(_flushCallback, 0);\n        }\n      };\n\n      requestHostTimeout = function requestHostTimeout(cb, ms) {\n        _timeoutID = setTimeout(cb, ms);\n      };\n\n      cancelHostTimeout = function cancelHostTimeout() {\n        clearTimeout(_timeoutID);\n      };\n\n      shouldYieldToHost = function shouldYieldToHost() {\n        return false;\n      };\n\n      requestPaint = exports.unstable_forceFrameRate = function () {};\n    } else {\n      // Capture local references to native APIs, in case a polyfill overrides them.\n      var performance = window.performance;\n      var _Date = window.Date;\n      var _setTimeout = window.setTimeout;\n      var _clearTimeout = window.clearTimeout;\n\n      if (typeof console !== 'undefined') {\n        // TODO: Scheduler no longer requires these methods to be polyfilled. But\n        // maybe we want to continue warning if they don't exist, to preserve the\n        // option to rely on it in the future?\n        var requestAnimationFrame = window.requestAnimationFrame;\n        var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link\n\n        if (typeof requestAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n\n        if (typeof cancelAnimationFrame !== 'function') {\n          console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n        }\n      }\n\n      if (typeof performance === 'object' && typeof performance.now === 'function') {\n        exports.unstable_now = function () {\n          return performance.now();\n        };\n      } else {\n        var _initialTime = _Date.now();\n\n        exports.unstable_now = function () {\n          return _Date.now() - _initialTime;\n        };\n      }\n\n      var isMessageLoopRunning = false;\n      var scheduledHostCallback = null;\n      var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n      // thread, like user events. By default, it yields multiple times per frame.\n      // It does not attempt to align with frame boundaries, since most tasks don't\n      // need to be frame aligned; for those that do, use requestAnimationFrame.\n\n      var yieldInterval = 5;\n      var deadline = 0; // TODO: Make this configurable\n      // TODO: Adjust this based on priority?\n\n      var maxYieldInterval = 300;\n      var needsPaint = false;\n\n      if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {\n        var scheduling = navigator.scheduling;\n\n        shouldYieldToHost = function shouldYieldToHost() {\n          var currentTime = exports.unstable_now();\n\n          if (currentTime >= deadline) {\n            // There's no time left. We may want to yield control of the main\n            // thread, so the browser can perform high priority tasks. The main ones\n            // are painting and user input. If there's a pending paint or a pending\n            // input, then we should yield. But if there's neither, then we can\n            // yield less often while remaining responsive. We'll eventually yield\n            // regardless, since there could be a pending paint that wasn't\n            // accompanied by a call to `requestPaint`, or other main thread tasks\n            // like network events.\n            if (needsPaint || scheduling.isInputPending()) {\n              // There is either a pending paint or a pending input.\n              return true;\n            } // There's no pending input. Only yield if we've reached the max\n            // yield interval.\n\n\n            return currentTime >= maxYieldInterval;\n          } else {\n            // There's still time left in the frame.\n            return false;\n          }\n        };\n\n        requestPaint = function requestPaint() {\n          needsPaint = true;\n        };\n      } else {\n        // `isInputPending` is not available. Since we have no way of knowing if\n        // there's pending input, always yield at the end of the frame.\n        shouldYieldToHost = function shouldYieldToHost() {\n          return exports.unstable_now() >= deadline;\n        }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n        requestPaint = function requestPaint() {};\n      }\n\n      exports.unstable_forceFrameRate = function (fps) {\n        if (fps < 0 || fps > 125) {\n          console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\n          return;\n        }\n\n        if (fps > 0) {\n          yieldInterval = Math.floor(1000 / fps);\n        } else {\n          // reset the framerate\n          yieldInterval = 5;\n        }\n      };\n\n      var performWorkUntilDeadline = function performWorkUntilDeadline() {\n        if (scheduledHostCallback !== null) {\n          var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n          // cycle. This means there's always time remaining at the beginning of\n          // the message event.\n\n          deadline = currentTime + yieldInterval;\n          var hasTimeRemaining = true;\n\n          try {\n            var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n            if (!hasMoreWork) {\n              isMessageLoopRunning = false;\n              scheduledHostCallback = null;\n            } else {\n              // If there's more work, schedule the next message event at the end\n              // of the preceding one.\n              port.postMessage(null);\n            }\n          } catch (error) {\n            // If a scheduler task throws, exit the current browser task so the\n            // error can be observed.\n            port.postMessage(null);\n            throw error;\n          }\n        } else {\n          isMessageLoopRunning = false;\n        } // Yielding to the browser will give it a chance to paint, so we can\n        // reset this.\n\n\n        needsPaint = false;\n      };\n\n      var channel = new MessageChannel();\n      var port = channel.port2;\n      channel.port1.onmessage = performWorkUntilDeadline;\n\n      _requestHostCallback = function _requestHostCallback(callback) {\n        scheduledHostCallback = callback;\n\n        if (!isMessageLoopRunning) {\n          isMessageLoopRunning = true;\n          port.postMessage(null);\n        }\n      };\n\n      requestHostTimeout = function requestHostTimeout(callback, ms) {\n        taskTimeoutID = _setTimeout(function () {\n          callback(exports.unstable_now());\n        }, ms);\n      };\n\n      cancelHostTimeout = function cancelHostTimeout() {\n        _clearTimeout(taskTimeoutID);\n\n        taskTimeoutID = -1;\n      };\n    }\n\n    function push(heap, node) {\n      var index = heap.length;\n      heap.push(node);\n      siftUp(heap, node, index);\n    }\n\n    function peek(heap) {\n      var first = heap[0];\n      return first === undefined ? null : first;\n    }\n\n    function pop(heap) {\n      var first = heap[0];\n\n      if (first !== undefined) {\n        var last = heap.pop();\n\n        if (last !== first) {\n          heap[0] = last;\n          siftDown(heap, last, 0);\n        }\n\n        return first;\n      } else {\n        return null;\n      }\n    }\n\n    function siftUp(heap, node, i) {\n      var index = i;\n\n      while (true) {\n        var parentIndex = Math.floor((index - 1) / 2);\n        var parent = heap[parentIndex];\n\n        if (parent !== undefined && compare(parent, node) > 0) {\n          // The parent is larger. Swap positions.\n          heap[parentIndex] = node;\n          heap[index] = parent;\n          index = parentIndex;\n        } else {\n          // The parent is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function siftDown(heap, node, i) {\n      var index = i;\n      var length = heap.length;\n\n      while (index < length) {\n        var leftIndex = (index + 1) * 2 - 1;\n        var left = heap[leftIndex];\n        var rightIndex = leftIndex + 1;\n        var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n        if (left !== undefined && compare(left, node) < 0) {\n          if (right !== undefined && compare(right, left) < 0) {\n            heap[index] = right;\n            heap[rightIndex] = node;\n            index = rightIndex;\n          } else {\n            heap[index] = left;\n            heap[leftIndex] = node;\n            index = leftIndex;\n          }\n        } else if (right !== undefined && compare(right, node) < 0) {\n          heap[index] = right;\n          heap[rightIndex] = node;\n          index = rightIndex;\n        } else {\n          // Neither child is smaller. Exit.\n          return;\n        }\n      }\n    }\n\n    function compare(a, b) {\n      // Compare sort index first, then task id.\n      var diff = a.sortIndex - b.sortIndex;\n      return diff !== 0 ? diff : a.id - b.id;\n    } // TODO: Use symbols?\n\n\n    var NoPriority = 0;\n    var ImmediatePriority = 1;\n    var UserBlockingPriority = 2;\n    var NormalPriority = 3;\n    var LowPriority = 4;\n    var IdlePriority = 5;\n    var runIdCounter = 0;\n    var mainThreadIdCounter = 0;\n    var profilingStateSize = 4;\n    var sharedProfilingBuffer = enableProfiling ? // $FlowFixMe Flow doesn't know about SharedArrayBuffer\n    typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\n    typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\n    : null;\n    var profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\n\n    var PRIORITY = 0;\n    var CURRENT_TASK_ID = 1;\n    var CURRENT_RUN_ID = 2;\n    var QUEUE_SIZE = 3;\n\n    if (enableProfiling) {\n      profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\n      // array might include canceled tasks.\n\n      profilingState[QUEUE_SIZE] = 0;\n      profilingState[CURRENT_TASK_ID] = 0;\n    } // Bytes per element is 4\n\n\n    var INITIAL_EVENT_LOG_SIZE = 131072;\n    var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\n    var eventLogSize = 0;\n    var eventLogBuffer = null;\n    var eventLog = null;\n    var eventLogIndex = 0;\n    var TaskStartEvent = 1;\n    var TaskCompleteEvent = 2;\n    var TaskErrorEvent = 3;\n    var TaskCancelEvent = 4;\n    var TaskRunEvent = 5;\n    var TaskYieldEvent = 6;\n    var SchedulerSuspendEvent = 7;\n    var SchedulerResumeEvent = 8;\n\n    function logEvent(entries) {\n      if (eventLog !== null) {\n        var offset = eventLogIndex;\n        eventLogIndex += entries.length;\n\n        if (eventLogIndex + 1 > eventLogSize) {\n          eventLogSize *= 2;\n\n          if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n            console.error(\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\n            stopLoggingProfilingEvents();\n            return;\n          }\n\n          var newEventLog = new Int32Array(eventLogSize * 4);\n          newEventLog.set(eventLog);\n          eventLogBuffer = newEventLog.buffer;\n          eventLog = newEventLog;\n        }\n\n        eventLog.set(entries, offset);\n      }\n    }\n\n    function startLoggingProfilingEvents() {\n      eventLogSize = INITIAL_EVENT_LOG_SIZE;\n      eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n      eventLog = new Int32Array(eventLogBuffer);\n      eventLogIndex = 0;\n    }\n\n    function stopLoggingProfilingEvents() {\n      var buffer = eventLogBuffer;\n      eventLogSize = 0;\n      eventLogBuffer = null;\n      eventLog = null;\n      eventLogIndex = 0;\n      return buffer;\n    }\n\n    function markTaskStart(task, ms) {\n      if (enableProfiling) {\n        profilingState[QUEUE_SIZE]++;\n\n        if (eventLog !== null) {\n          // performance.now returns a float, representing milliseconds. When the\n          // event is logged, it's coerced to an int. Convert to microseconds to\n          // maintain extra degrees of precision.\n          logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n        }\n      }\n    }\n\n    function markTaskCompleted(task, ms) {\n      if (enableProfiling) {\n        profilingState[PRIORITY] = NoPriority;\n        profilingState[CURRENT_TASK_ID] = 0;\n        profilingState[QUEUE_SIZE]--;\n\n        if (eventLog !== null) {\n          logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n        }\n      }\n    }\n\n    function markTaskCanceled(task, ms) {\n      if (enableProfiling) {\n        profilingState[QUEUE_SIZE]--;\n\n        if (eventLog !== null) {\n          logEvent([TaskCancelEvent, ms * 1000, task.id]);\n        }\n      }\n    }\n\n    function markTaskErrored(task, ms) {\n      if (enableProfiling) {\n        profilingState[PRIORITY] = NoPriority;\n        profilingState[CURRENT_TASK_ID] = 0;\n        profilingState[QUEUE_SIZE]--;\n\n        if (eventLog !== null) {\n          logEvent([TaskErrorEvent, ms * 1000, task.id]);\n        }\n      }\n    }\n\n    function markTaskRun(task, ms) {\n      if (enableProfiling) {\n        runIdCounter++;\n        profilingState[PRIORITY] = task.priorityLevel;\n        profilingState[CURRENT_TASK_ID] = task.id;\n        profilingState[CURRENT_RUN_ID] = runIdCounter;\n\n        if (eventLog !== null) {\n          logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n        }\n      }\n    }\n\n    function markTaskYield(task, ms) {\n      if (enableProfiling) {\n        profilingState[PRIORITY] = NoPriority;\n        profilingState[CURRENT_TASK_ID] = 0;\n        profilingState[CURRENT_RUN_ID] = 0;\n\n        if (eventLog !== null) {\n          logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n        }\n      }\n    }\n\n    function markSchedulerSuspended(ms) {\n      if (enableProfiling) {\n        mainThreadIdCounter++;\n\n        if (eventLog !== null) {\n          logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n        }\n      }\n    }\n\n    function markSchedulerUnsuspended(ms) {\n      if (enableProfiling) {\n        if (eventLog !== null) {\n          logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n        }\n      }\n    }\n    /* eslint-disable no-var */\n    // Math.pow(2, 30) - 1\n    // 0b111111111111111111111111111111\n\n\n    var maxSigned31BitInt = 1073741823; // Times out immediately\n\n    var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\n    var USER_BLOCKING_PRIORITY = 250;\n    var NORMAL_PRIORITY_TIMEOUT = 5000;\n    var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\n    var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\n\n    var taskQueue = [];\n    var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\n    var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\n    var isSchedulerPaused = false;\n    var currentTask = null;\n    var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\n    var isPerformingWork = false;\n    var isHostCallbackScheduled = false;\n    var isHostTimeoutScheduled = false;\n\n    function advanceTimers(currentTime) {\n      // Check for tasks that are no longer delayed and add them to the queue.\n      var timer = peek(timerQueue);\n\n      while (timer !== null) {\n        if (timer.callback === null) {\n          // Timer was cancelled.\n          pop(timerQueue);\n        } else if (timer.startTime <= currentTime) {\n          // Timer fired. Transfer to the task queue.\n          pop(timerQueue);\n          timer.sortIndex = timer.expirationTime;\n          push(taskQueue, timer);\n\n          if (enableProfiling) {\n            markTaskStart(timer, currentTime);\n            timer.isQueued = true;\n          }\n        } else {\n          // Remaining timers are pending.\n          return;\n        }\n\n        timer = peek(timerQueue);\n      }\n    }\n\n    function handleTimeout(currentTime) {\n      isHostTimeoutScheduled = false;\n      advanceTimers(currentTime);\n\n      if (!isHostCallbackScheduled) {\n        if (peek(taskQueue) !== null) {\n          isHostCallbackScheduled = true;\n\n          _requestHostCallback(flushWork);\n        } else {\n          var firstTimer = peek(timerQueue);\n\n          if (firstTimer !== null) {\n            requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n          }\n        }\n      }\n    }\n\n    function flushWork(hasTimeRemaining, initialTime) {\n      if (enableProfiling) {\n        markSchedulerUnsuspended(initialTime);\n      } // We'll need a host callback the next time work is scheduled.\n\n\n      isHostCallbackScheduled = false;\n\n      if (isHostTimeoutScheduled) {\n        // We scheduled a timeout but it's no longer needed. Cancel it.\n        isHostTimeoutScheduled = false;\n        cancelHostTimeout();\n      }\n\n      isPerformingWork = true;\n      var previousPriorityLevel = currentPriorityLevel;\n\n      try {\n        if (enableProfiling) {\n          try {\n            return workLoop(hasTimeRemaining, initialTime);\n          } catch (error) {\n            if (currentTask !== null) {\n              var currentTime = exports.unstable_now();\n              markTaskErrored(currentTask, currentTime);\n              currentTask.isQueued = false;\n            }\n\n            throw error;\n          }\n        } else {\n          // No catch in prod codepath.\n          return workLoop(hasTimeRemaining, initialTime);\n        }\n      } finally {\n        currentTask = null;\n        currentPriorityLevel = previousPriorityLevel;\n        isPerformingWork = false;\n\n        if (enableProfiling) {\n          var _currentTime = exports.unstable_now();\n\n          markSchedulerSuspended(_currentTime);\n        }\n      }\n    }\n\n    function workLoop(hasTimeRemaining, initialTime) {\n      var currentTime = initialTime;\n      advanceTimers(currentTime);\n      currentTask = peek(taskQueue);\n\n      while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {\n        if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n          // This currentTask hasn't expired, and we've reached the deadline.\n          break;\n        }\n\n        var callback = currentTask.callback;\n\n        if (callback !== null) {\n          currentTask.callback = null;\n          currentPriorityLevel = currentTask.priorityLevel;\n          var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n          markTaskRun(currentTask, currentTime);\n          var continuationCallback = callback(didUserCallbackTimeout);\n          currentTime = exports.unstable_now();\n\n          if (typeof continuationCallback === 'function') {\n            currentTask.callback = continuationCallback;\n            markTaskYield(currentTask, currentTime);\n          } else {\n            if (enableProfiling) {\n              markTaskCompleted(currentTask, currentTime);\n              currentTask.isQueued = false;\n            }\n\n            if (currentTask === peek(taskQueue)) {\n              pop(taskQueue);\n            }\n          }\n\n          advanceTimers(currentTime);\n        } else {\n          pop(taskQueue);\n        }\n\n        currentTask = peek(taskQueue);\n      } // Return whether there's additional work\n\n\n      if (currentTask !== null) {\n        return true;\n      } else {\n        var firstTimer = peek(timerQueue);\n\n        if (firstTimer !== null) {\n          requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n        }\n\n        return false;\n      }\n    }\n\n    function unstable_runWithPriority(priorityLevel, eventHandler) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n        case LowPriority:\n        case IdlePriority:\n          break;\n\n        default:\n          priorityLevel = NormalPriority;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_next(eventHandler) {\n      var priorityLevel;\n\n      switch (currentPriorityLevel) {\n        case ImmediatePriority:\n        case UserBlockingPriority:\n        case NormalPriority:\n          // Shift down to normal priority\n          priorityLevel = NormalPriority;\n          break;\n\n        default:\n          // Anything lower than normal priority should remain at the current level.\n          priorityLevel = currentPriorityLevel;\n          break;\n      }\n\n      var previousPriorityLevel = currentPriorityLevel;\n      currentPriorityLevel = priorityLevel;\n\n      try {\n        return eventHandler();\n      } finally {\n        currentPriorityLevel = previousPriorityLevel;\n      }\n    }\n\n    function unstable_wrapCallback(callback) {\n      var parentPriorityLevel = currentPriorityLevel;\n      return function () {\n        // This is a fork of runWithPriority, inlined for performance.\n        var previousPriorityLevel = currentPriorityLevel;\n        currentPriorityLevel = parentPriorityLevel;\n\n        try {\n          return callback.apply(this, arguments);\n        } finally {\n          currentPriorityLevel = previousPriorityLevel;\n        }\n      };\n    }\n\n    function timeoutForPriorityLevel(priorityLevel) {\n      switch (priorityLevel) {\n        case ImmediatePriority:\n          return IMMEDIATE_PRIORITY_TIMEOUT;\n\n        case UserBlockingPriority:\n          return USER_BLOCKING_PRIORITY;\n\n        case IdlePriority:\n          return IDLE_PRIORITY;\n\n        case LowPriority:\n          return LOW_PRIORITY_TIMEOUT;\n\n        case NormalPriority:\n        default:\n          return NORMAL_PRIORITY_TIMEOUT;\n      }\n    }\n\n    function unstable_scheduleCallback(priorityLevel, callback, options) {\n      var currentTime = exports.unstable_now();\n      var startTime;\n      var timeout;\n\n      if (typeof options === 'object' && options !== null) {\n        var delay = options.delay;\n\n        if (typeof delay === 'number' && delay > 0) {\n          startTime = currentTime + delay;\n        } else {\n          startTime = currentTime;\n        }\n\n        timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n      } else {\n        timeout = timeoutForPriorityLevel(priorityLevel);\n        startTime = currentTime;\n      }\n\n      var expirationTime = startTime + timeout;\n      var newTask = {\n        id: taskIdCounter++,\n        callback: callback,\n        priorityLevel: priorityLevel,\n        startTime: startTime,\n        expirationTime: expirationTime,\n        sortIndex: -1\n      };\n\n      if (enableProfiling) {\n        newTask.isQueued = false;\n      }\n\n      if (startTime > currentTime) {\n        // This is a delayed task.\n        newTask.sortIndex = startTime;\n        push(timerQueue, newTask);\n\n        if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n          // All tasks are delayed, and this is the task with the earliest delay.\n          if (isHostTimeoutScheduled) {\n            // Cancel an existing timeout.\n            cancelHostTimeout();\n          } else {\n            isHostTimeoutScheduled = true;\n          } // Schedule a timeout.\n\n\n          requestHostTimeout(handleTimeout, startTime - currentTime);\n        }\n      } else {\n        newTask.sortIndex = expirationTime;\n        push(taskQueue, newTask);\n\n        if (enableProfiling) {\n          markTaskStart(newTask, currentTime);\n          newTask.isQueued = true;\n        } // Schedule a host callback, if needed. If we're already performing work,\n        // wait until the next time we yield.\n\n\n        if (!isHostCallbackScheduled && !isPerformingWork) {\n          isHostCallbackScheduled = true;\n\n          _requestHostCallback(flushWork);\n        }\n      }\n\n      return newTask;\n    }\n\n    function unstable_pauseExecution() {\n      isSchedulerPaused = true;\n    }\n\n    function unstable_continueExecution() {\n      isSchedulerPaused = false;\n\n      if (!isHostCallbackScheduled && !isPerformingWork) {\n        isHostCallbackScheduled = true;\n\n        _requestHostCallback(flushWork);\n      }\n    }\n\n    function unstable_getFirstCallbackNode() {\n      return peek(taskQueue);\n    }\n\n    function unstable_cancelCallback(task) {\n      if (enableProfiling) {\n        if (task.isQueued) {\n          var currentTime = exports.unstable_now();\n          markTaskCanceled(task, currentTime);\n          task.isQueued = false;\n        }\n      } // Null out the callback to indicate the task has been canceled. (Can't\n      // remove from the queue because you can't remove arbitrary nodes from an\n      // array based heap, only the first one.)\n\n\n      task.callback = null;\n    }\n\n    function unstable_getCurrentPriorityLevel() {\n      return currentPriorityLevel;\n    }\n\n    function unstable_shouldYield() {\n      var currentTime = exports.unstable_now();\n      advanceTimers(currentTime);\n      var firstTask = peek(taskQueue);\n      return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n    }\n\n    var unstable_requestPaint = requestPaint;\n    var unstable_Profiling = enableProfiling ? {\n      startLoggingProfilingEvents: startLoggingProfilingEvents,\n      stopLoggingProfilingEvents: stopLoggingProfilingEvents,\n      sharedProfilingBuffer: sharedProfilingBuffer\n    } : null;\n    exports.unstable_ImmediatePriority = ImmediatePriority;\n    exports.unstable_UserBlockingPriority = UserBlockingPriority;\n    exports.unstable_NormalPriority = NormalPriority;\n    exports.unstable_IdlePriority = IdlePriority;\n    exports.unstable_LowPriority = LowPriority;\n    exports.unstable_runWithPriority = unstable_runWithPriority;\n    exports.unstable_next = unstable_next;\n    exports.unstable_scheduleCallback = unstable_scheduleCallback;\n    exports.unstable_cancelCallback = unstable_cancelCallback;\n    exports.unstable_wrapCallback = unstable_wrapCallback;\n    exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n    exports.unstable_shouldYield = unstable_shouldYield;\n    exports.unstable_requestPaint = unstable_requestPaint;\n    exports.unstable_continueExecution = unstable_continueExecution;\n    exports.unstable_pauseExecution = unstable_pauseExecution;\n    exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n    exports.unstable_Profiling = unstable_Profiling;\n  })();\n}","map":{"version":3,"names":["process","env","NODE_ENV","Object","defineProperty","exports","value","enableSchedulerDebugging","enableIsInputPending","enableProfiling","requestHostCallback","requestHostTimeout","cancelHostTimeout","shouldYieldToHost","requestPaint","window","MessageChannel","_callback","_timeoutID","_flushCallback","currentTime","unstable_now","hasRemainingTime","e","setTimeout","initialTime","Date","now","cb","ms","clearTimeout","unstable_forceFrameRate","performance","_Date","_setTimeout","_clearTimeout","console","requestAnimationFrame","cancelAnimationFrame","error","_initialTime","isMessageLoopRunning","scheduledHostCallback","taskTimeoutID","yieldInterval","deadline","maxYieldInterval","needsPaint","navigator","undefined","scheduling","isInputPending","fps","Math","floor","performWorkUntilDeadline","hasTimeRemaining","hasMoreWork","port","postMessage","channel","port2","port1","onmessage","callback","push","heap","node","index","length","siftUp","peek","first","pop","last","siftDown","i","parentIndex","parent","compare","leftIndex","left","rightIndex","right","a","b","diff","sortIndex","id","NoPriority","ImmediatePriority","UserBlockingPriority","NormalPriority","LowPriority","IdlePriority","runIdCounter","mainThreadIdCounter","profilingStateSize","sharedProfilingBuffer","SharedArrayBuffer","Int32Array","BYTES_PER_ELEMENT","ArrayBuffer","profilingState","PRIORITY","CURRENT_TASK_ID","CURRENT_RUN_ID","QUEUE_SIZE","INITIAL_EVENT_LOG_SIZE","MAX_EVENT_LOG_SIZE","eventLogSize","eventLogBuffer","eventLog","eventLogIndex","TaskStartEvent","TaskCompleteEvent","TaskErrorEvent","TaskCancelEvent","TaskRunEvent","TaskYieldEvent","SchedulerSuspendEvent","SchedulerResumeEvent","logEvent","entries","offset","stopLoggingProfilingEvents","newEventLog","set","buffer","startLoggingProfilingEvents","markTaskStart","task","priorityLevel","markTaskCompleted","markTaskCanceled","markTaskErrored","markTaskRun","markTaskYield","markSchedulerSuspended","markSchedulerUnsuspended","maxSigned31BitInt","IMMEDIATE_PRIORITY_TIMEOUT","USER_BLOCKING_PRIORITY","NORMAL_PRIORITY_TIMEOUT","LOW_PRIORITY_TIMEOUT","IDLE_PRIORITY","taskQueue","timerQueue","taskIdCounter","isSchedulerPaused","currentTask","currentPriorityLevel","isPerformingWork","isHostCallbackScheduled","isHostTimeoutScheduled","advanceTimers","timer","startTime","expirationTime","isQueued","handleTimeout","flushWork","firstTimer","previousPriorityLevel","workLoop","_currentTime","didUserCallbackTimeout","continuationCallback","unstable_runWithPriority","eventHandler","unstable_next","unstable_wrapCallback","parentPriorityLevel","apply","arguments","timeoutForPriorityLevel","unstable_scheduleCallback","options","timeout","delay","newTask","unstable_pauseExecution","unstable_continueExecution","unstable_getFirstCallbackNode","unstable_cancelCallback","unstable_getCurrentPriorityLevel","unstable_shouldYield","firstTask","unstable_requestPaint","unstable_Profiling","unstable_ImmediatePriority","unstable_UserBlockingPriority","unstable_NormalPriority","unstable_IdlePriority","unstable_LowPriority"],"sources":["/Users/janhavi/Real-Time-Recs-UKDale/FrontEnd/node_modules/scheduler/cjs/scheduler.development.js"],"sourcesContent":["/** @license React v0.18.0\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n\n\nif (process.env.NODE_ENV !== \"production\") {\n  (function() {\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar enableSchedulerDebugging = false;\nvar enableIsInputPending = false;\nvar enableProfiling = true;\n\nvar requestHostCallback;\n\nvar requestHostTimeout;\nvar cancelHostTimeout;\nvar shouldYieldToHost;\nvar requestPaint;\n\n\n\nif ( // If Scheduler runs in a non-DOM environment, it falls back to a naive\n// implementation using setTimeout.\ntypeof window === 'undefined' || // Check if MessageChannel is supported, too.\ntypeof MessageChannel !== 'function') {\n  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,\n  // fallback to a naive implementation.\n  var _callback = null;\n  var _timeoutID = null;\n\n  var _flushCallback = function () {\n    if (_callback !== null) {\n      try {\n        var currentTime = exports.unstable_now();\n        var hasRemainingTime = true;\n\n        _callback(hasRemainingTime, currentTime);\n\n        _callback = null;\n      } catch (e) {\n        setTimeout(_flushCallback, 0);\n        throw e;\n      }\n    }\n  };\n\n  var initialTime = Date.now();\n\n  exports.unstable_now = function () {\n    return Date.now() - initialTime;\n  };\n\n  requestHostCallback = function (cb) {\n    if (_callback !== null) {\n      // Protect against re-entrancy.\n      setTimeout(requestHostCallback, 0, cb);\n    } else {\n      _callback = cb;\n      setTimeout(_flushCallback, 0);\n    }\n  };\n\n  requestHostTimeout = function (cb, ms) {\n    _timeoutID = setTimeout(cb, ms);\n  };\n\n  cancelHostTimeout = function () {\n    clearTimeout(_timeoutID);\n  };\n\n  shouldYieldToHost = function () {\n    return false;\n  };\n\n  requestPaint = exports.unstable_forceFrameRate = function () {};\n} else {\n  // Capture local references to native APIs, in case a polyfill overrides them.\n  var performance = window.performance;\n  var _Date = window.Date;\n  var _setTimeout = window.setTimeout;\n  var _clearTimeout = window.clearTimeout;\n\n  if (typeof console !== 'undefined') {\n    // TODO: Scheduler no longer requires these methods to be polyfilled. But\n    // maybe we want to continue warning if they don't exist, to preserve the\n    // option to rely on it in the future?\n    var requestAnimationFrame = window.requestAnimationFrame;\n    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link\n\n    if (typeof requestAnimationFrame !== 'function') {\n      console.error(\"This browser doesn't support requestAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n    }\n\n    if (typeof cancelAnimationFrame !== 'function') {\n      console.error(\"This browser doesn't support cancelAnimationFrame. \" + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');\n    }\n  }\n\n  if (typeof performance === 'object' && typeof performance.now === 'function') {\n    exports.unstable_now = function () {\n      return performance.now();\n    };\n  } else {\n    var _initialTime = _Date.now();\n\n    exports.unstable_now = function () {\n      return _Date.now() - _initialTime;\n    };\n  }\n\n  var isMessageLoopRunning = false;\n  var scheduledHostCallback = null;\n  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n  // thread, like user events. By default, it yields multiple times per frame.\n  // It does not attempt to align with frame boundaries, since most tasks don't\n  // need to be frame aligned; for those that do, use requestAnimationFrame.\n\n  var yieldInterval = 5;\n  var deadline = 0; // TODO: Make this configurable\n  // TODO: Adjust this based on priority?\n\n  var maxYieldInterval = 300;\n  var needsPaint = false;\n\n  if (enableIsInputPending && navigator !== undefined && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined) {\n    var scheduling = navigator.scheduling;\n\n    shouldYieldToHost = function () {\n      var currentTime = exports.unstable_now();\n\n      if (currentTime >= deadline) {\n        // There's no time left. We may want to yield control of the main\n        // thread, so the browser can perform high priority tasks. The main ones\n        // are painting and user input. If there's a pending paint or a pending\n        // input, then we should yield. But if there's neither, then we can\n        // yield less often while remaining responsive. We'll eventually yield\n        // regardless, since there could be a pending paint that wasn't\n        // accompanied by a call to `requestPaint`, or other main thread tasks\n        // like network events.\n        if (needsPaint || scheduling.isInputPending()) {\n          // There is either a pending paint or a pending input.\n          return true;\n        } // There's no pending input. Only yield if we've reached the max\n        // yield interval.\n\n\n        return currentTime >= maxYieldInterval;\n      } else {\n        // There's still time left in the frame.\n        return false;\n      }\n    };\n\n    requestPaint = function () {\n      needsPaint = true;\n    };\n  } else {\n    // `isInputPending` is not available. Since we have no way of knowing if\n    // there's pending input, always yield at the end of the frame.\n    shouldYieldToHost = function () {\n      return exports.unstable_now() >= deadline;\n    }; // Since we yield every frame regardless, `requestPaint` has no effect.\n\n\n    requestPaint = function () {};\n  }\n\n  exports.unstable_forceFrameRate = function (fps) {\n    if (fps < 0 || fps > 125) {\n      console.error('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');\n      return;\n    }\n\n    if (fps > 0) {\n      yieldInterval = Math.floor(1000 / fps);\n    } else {\n      // reset the framerate\n      yieldInterval = 5;\n    }\n  };\n\n  var performWorkUntilDeadline = function () {\n    if (scheduledHostCallback !== null) {\n      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync\n      // cycle. This means there's always time remaining at the beginning of\n      // the message event.\n\n      deadline = currentTime + yieldInterval;\n      var hasTimeRemaining = true;\n\n      try {\n        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n\n        if (!hasMoreWork) {\n          isMessageLoopRunning = false;\n          scheduledHostCallback = null;\n        } else {\n          // If there's more work, schedule the next message event at the end\n          // of the preceding one.\n          port.postMessage(null);\n        }\n      } catch (error) {\n        // If a scheduler task throws, exit the current browser task so the\n        // error can be observed.\n        port.postMessage(null);\n        throw error;\n      }\n    } else {\n      isMessageLoopRunning = false;\n    } // Yielding to the browser will give it a chance to paint, so we can\n    // reset this.\n\n\n    needsPaint = false;\n  };\n\n  var channel = new MessageChannel();\n  var port = channel.port2;\n  channel.port1.onmessage = performWorkUntilDeadline;\n\n  requestHostCallback = function (callback) {\n    scheduledHostCallback = callback;\n\n    if (!isMessageLoopRunning) {\n      isMessageLoopRunning = true;\n      port.postMessage(null);\n    }\n  };\n\n  requestHostTimeout = function (callback, ms) {\n    taskTimeoutID = _setTimeout(function () {\n      callback(exports.unstable_now());\n    }, ms);\n  };\n\n  cancelHostTimeout = function () {\n    _clearTimeout(taskTimeoutID);\n\n    taskTimeoutID = -1;\n  };\n}\n\nfunction push(heap, node) {\n  var index = heap.length;\n  heap.push(node);\n  siftUp(heap, node, index);\n}\nfunction peek(heap) {\n  var first = heap[0];\n  return first === undefined ? null : first;\n}\nfunction pop(heap) {\n  var first = heap[0];\n\n  if (first !== undefined) {\n    var last = heap.pop();\n\n    if (last !== first) {\n      heap[0] = last;\n      siftDown(heap, last, 0);\n    }\n\n    return first;\n  } else {\n    return null;\n  }\n}\n\nfunction siftUp(heap, node, i) {\n  var index = i;\n\n  while (true) {\n    var parentIndex = Math.floor((index - 1) / 2);\n    var parent = heap[parentIndex];\n\n    if (parent !== undefined && compare(parent, node) > 0) {\n      // The parent is larger. Swap positions.\n      heap[parentIndex] = node;\n      heap[index] = parent;\n      index = parentIndex;\n    } else {\n      // The parent is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction siftDown(heap, node, i) {\n  var index = i;\n  var length = heap.length;\n\n  while (index < length) {\n    var leftIndex = (index + 1) * 2 - 1;\n    var left = heap[leftIndex];\n    var rightIndex = leftIndex + 1;\n    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n\n    if (left !== undefined && compare(left, node) < 0) {\n      if (right !== undefined && compare(right, left) < 0) {\n        heap[index] = right;\n        heap[rightIndex] = node;\n        index = rightIndex;\n      } else {\n        heap[index] = left;\n        heap[leftIndex] = node;\n        index = leftIndex;\n      }\n    } else if (right !== undefined && compare(right, node) < 0) {\n      heap[index] = right;\n      heap[rightIndex] = node;\n      index = rightIndex;\n    } else {\n      // Neither child is smaller. Exit.\n      return;\n    }\n  }\n}\n\nfunction compare(a, b) {\n  // Compare sort index first, then task id.\n  var diff = a.sortIndex - b.sortIndex;\n  return diff !== 0 ? diff : a.id - b.id;\n}\n\n// TODO: Use symbols?\nvar NoPriority = 0;\nvar ImmediatePriority = 1;\nvar UserBlockingPriority = 2;\nvar NormalPriority = 3;\nvar LowPriority = 4;\nvar IdlePriority = 5;\n\nvar runIdCounter = 0;\nvar mainThreadIdCounter = 0;\nvar profilingStateSize = 4;\nvar sharedProfilingBuffer = enableProfiling ? // $FlowFixMe Flow doesn't know about SharedArrayBuffer\ntypeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer\ntypeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9\n: null;\nvar profilingState = enableProfiling && sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks\n\nvar PRIORITY = 0;\nvar CURRENT_TASK_ID = 1;\nvar CURRENT_RUN_ID = 2;\nvar QUEUE_SIZE = 3;\n\nif (enableProfiling) {\n  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue\n  // array might include canceled tasks.\n\n  profilingState[QUEUE_SIZE] = 0;\n  profilingState[CURRENT_TASK_ID] = 0;\n} // Bytes per element is 4\n\n\nvar INITIAL_EVENT_LOG_SIZE = 131072;\nvar MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes\n\nvar eventLogSize = 0;\nvar eventLogBuffer = null;\nvar eventLog = null;\nvar eventLogIndex = 0;\nvar TaskStartEvent = 1;\nvar TaskCompleteEvent = 2;\nvar TaskErrorEvent = 3;\nvar TaskCancelEvent = 4;\nvar TaskRunEvent = 5;\nvar TaskYieldEvent = 6;\nvar SchedulerSuspendEvent = 7;\nvar SchedulerResumeEvent = 8;\n\nfunction logEvent(entries) {\n  if (eventLog !== null) {\n    var offset = eventLogIndex;\n    eventLogIndex += entries.length;\n\n    if (eventLogIndex + 1 > eventLogSize) {\n      eventLogSize *= 2;\n\n      if (eventLogSize > MAX_EVENT_LOG_SIZE) {\n        console.error(\"Scheduler Profiling: Event log exceeded maximum size. Don't \" + 'forget to call `stopLoggingProfilingEvents()`.');\n        stopLoggingProfilingEvents();\n        return;\n      }\n\n      var newEventLog = new Int32Array(eventLogSize * 4);\n      newEventLog.set(eventLog);\n      eventLogBuffer = newEventLog.buffer;\n      eventLog = newEventLog;\n    }\n\n    eventLog.set(entries, offset);\n  }\n}\n\nfunction startLoggingProfilingEvents() {\n  eventLogSize = INITIAL_EVENT_LOG_SIZE;\n  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);\n  eventLog = new Int32Array(eventLogBuffer);\n  eventLogIndex = 0;\n}\nfunction stopLoggingProfilingEvents() {\n  var buffer = eventLogBuffer;\n  eventLogSize = 0;\n  eventLogBuffer = null;\n  eventLog = null;\n  eventLogIndex = 0;\n  return buffer;\n}\nfunction markTaskStart(task, ms) {\n  if (enableProfiling) {\n    profilingState[QUEUE_SIZE]++;\n\n    if (eventLog !== null) {\n      // performance.now returns a float, representing milliseconds. When the\n      // event is logged, it's coerced to an int. Convert to microseconds to\n      // maintain extra degrees of precision.\n      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);\n    }\n  }\n}\nfunction markTaskCompleted(task, ms) {\n  if (enableProfiling) {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskCompleteEvent, ms * 1000, task.id]);\n    }\n  }\n}\nfunction markTaskCanceled(task, ms) {\n  if (enableProfiling) {\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskCancelEvent, ms * 1000, task.id]);\n    }\n  }\n}\nfunction markTaskErrored(task, ms) {\n  if (enableProfiling) {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[QUEUE_SIZE]--;\n\n    if (eventLog !== null) {\n      logEvent([TaskErrorEvent, ms * 1000, task.id]);\n    }\n  }\n}\nfunction markTaskRun(task, ms) {\n  if (enableProfiling) {\n    runIdCounter++;\n    profilingState[PRIORITY] = task.priorityLevel;\n    profilingState[CURRENT_TASK_ID] = task.id;\n    profilingState[CURRENT_RUN_ID] = runIdCounter;\n\n    if (eventLog !== null) {\n      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\nfunction markTaskYield(task, ms) {\n  if (enableProfiling) {\n    profilingState[PRIORITY] = NoPriority;\n    profilingState[CURRENT_TASK_ID] = 0;\n    profilingState[CURRENT_RUN_ID] = 0;\n\n    if (eventLog !== null) {\n      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);\n    }\n  }\n}\nfunction markSchedulerSuspended(ms) {\n  if (enableProfiling) {\n    mainThreadIdCounter++;\n\n    if (eventLog !== null) {\n      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\nfunction markSchedulerUnsuspended(ms) {\n  if (enableProfiling) {\n    if (eventLog !== null) {\n      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);\n    }\n  }\n}\n\n/* eslint-disable no-var */\n// Math.pow(2, 30) - 1\n// 0b111111111111111111111111111111\n\nvar maxSigned31BitInt = 1073741823; // Times out immediately\n\nvar IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n\nvar USER_BLOCKING_PRIORITY = 250;\nvar NORMAL_PRIORITY_TIMEOUT = 5000;\nvar LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n\nvar IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap\n\nvar taskQueue = [];\nvar timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n\nvar taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n\nvar isSchedulerPaused = false;\nvar currentTask = null;\nvar currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.\n\nvar isPerformingWork = false;\nvar isHostCallbackScheduled = false;\nvar isHostTimeoutScheduled = false;\n\nfunction advanceTimers(currentTime) {\n  // Check for tasks that are no longer delayed and add them to the queue.\n  var timer = peek(timerQueue);\n\n  while (timer !== null) {\n    if (timer.callback === null) {\n      // Timer was cancelled.\n      pop(timerQueue);\n    } else if (timer.startTime <= currentTime) {\n      // Timer fired. Transfer to the task queue.\n      pop(timerQueue);\n      timer.sortIndex = timer.expirationTime;\n      push(taskQueue, timer);\n\n      if (enableProfiling) {\n        markTaskStart(timer, currentTime);\n        timer.isQueued = true;\n      }\n    } else {\n      // Remaining timers are pending.\n      return;\n    }\n\n    timer = peek(timerQueue);\n  }\n}\n\nfunction handleTimeout(currentTime) {\n  isHostTimeoutScheduled = false;\n  advanceTimers(currentTime);\n\n  if (!isHostCallbackScheduled) {\n    if (peek(taskQueue) !== null) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    } else {\n      var firstTimer = peek(timerQueue);\n\n      if (firstTimer !== null) {\n        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n      }\n    }\n  }\n}\n\nfunction flushWork(hasTimeRemaining, initialTime) {\n  if (enableProfiling) {\n    markSchedulerUnsuspended(initialTime);\n  } // We'll need a host callback the next time work is scheduled.\n\n\n  isHostCallbackScheduled = false;\n\n  if (isHostTimeoutScheduled) {\n    // We scheduled a timeout but it's no longer needed. Cancel it.\n    isHostTimeoutScheduled = false;\n    cancelHostTimeout();\n  }\n\n  isPerformingWork = true;\n  var previousPriorityLevel = currentPriorityLevel;\n\n  try {\n    if (enableProfiling) {\n      try {\n        return workLoop(hasTimeRemaining, initialTime);\n      } catch (error) {\n        if (currentTask !== null) {\n          var currentTime = exports.unstable_now();\n          markTaskErrored(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        throw error;\n      }\n    } else {\n      // No catch in prod codepath.\n      return workLoop(hasTimeRemaining, initialTime);\n    }\n  } finally {\n    currentTask = null;\n    currentPriorityLevel = previousPriorityLevel;\n    isPerformingWork = false;\n\n    if (enableProfiling) {\n      var _currentTime = exports.unstable_now();\n\n      markSchedulerSuspended(_currentTime);\n    }\n  }\n}\n\nfunction workLoop(hasTimeRemaining, initialTime) {\n  var currentTime = initialTime;\n  advanceTimers(currentTime);\n  currentTask = peek(taskQueue);\n\n  while (currentTask !== null && !(enableSchedulerDebugging && isSchedulerPaused)) {\n    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n      // This currentTask hasn't expired, and we've reached the deadline.\n      break;\n    }\n\n    var callback = currentTask.callback;\n\n    if (callback !== null) {\n      currentTask.callback = null;\n      currentPriorityLevel = currentTask.priorityLevel;\n      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n      markTaskRun(currentTask, currentTime);\n      var continuationCallback = callback(didUserCallbackTimeout);\n      currentTime = exports.unstable_now();\n\n      if (typeof continuationCallback === 'function') {\n        currentTask.callback = continuationCallback;\n        markTaskYield(currentTask, currentTime);\n      } else {\n        if (enableProfiling) {\n          markTaskCompleted(currentTask, currentTime);\n          currentTask.isQueued = false;\n        }\n\n        if (currentTask === peek(taskQueue)) {\n          pop(taskQueue);\n        }\n      }\n\n      advanceTimers(currentTime);\n    } else {\n      pop(taskQueue);\n    }\n\n    currentTask = peek(taskQueue);\n  } // Return whether there's additional work\n\n\n  if (currentTask !== null) {\n    return true;\n  } else {\n    var firstTimer = peek(timerQueue);\n\n    if (firstTimer !== null) {\n      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n    }\n\n    return false;\n  }\n}\n\nfunction unstable_runWithPriority(priorityLevel, eventHandler) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n    case LowPriority:\n    case IdlePriority:\n      break;\n\n    default:\n      priorityLevel = NormalPriority;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_next(eventHandler) {\n  var priorityLevel;\n\n  switch (currentPriorityLevel) {\n    case ImmediatePriority:\n    case UserBlockingPriority:\n    case NormalPriority:\n      // Shift down to normal priority\n      priorityLevel = NormalPriority;\n      break;\n\n    default:\n      // Anything lower than normal priority should remain at the current level.\n      priorityLevel = currentPriorityLevel;\n      break;\n  }\n\n  var previousPriorityLevel = currentPriorityLevel;\n  currentPriorityLevel = priorityLevel;\n\n  try {\n    return eventHandler();\n  } finally {\n    currentPriorityLevel = previousPriorityLevel;\n  }\n}\n\nfunction unstable_wrapCallback(callback) {\n  var parentPriorityLevel = currentPriorityLevel;\n  return function () {\n    // This is a fork of runWithPriority, inlined for performance.\n    var previousPriorityLevel = currentPriorityLevel;\n    currentPriorityLevel = parentPriorityLevel;\n\n    try {\n      return callback.apply(this, arguments);\n    } finally {\n      currentPriorityLevel = previousPriorityLevel;\n    }\n  };\n}\n\nfunction timeoutForPriorityLevel(priorityLevel) {\n  switch (priorityLevel) {\n    case ImmediatePriority:\n      return IMMEDIATE_PRIORITY_TIMEOUT;\n\n    case UserBlockingPriority:\n      return USER_BLOCKING_PRIORITY;\n\n    case IdlePriority:\n      return IDLE_PRIORITY;\n\n    case LowPriority:\n      return LOW_PRIORITY_TIMEOUT;\n\n    case NormalPriority:\n    default:\n      return NORMAL_PRIORITY_TIMEOUT;\n  }\n}\n\nfunction unstable_scheduleCallback(priorityLevel, callback, options) {\n  var currentTime = exports.unstable_now();\n  var startTime;\n  var timeout;\n\n  if (typeof options === 'object' && options !== null) {\n    var delay = options.delay;\n\n    if (typeof delay === 'number' && delay > 0) {\n      startTime = currentTime + delay;\n    } else {\n      startTime = currentTime;\n    }\n\n    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);\n  } else {\n    timeout = timeoutForPriorityLevel(priorityLevel);\n    startTime = currentTime;\n  }\n\n  var expirationTime = startTime + timeout;\n  var newTask = {\n    id: taskIdCounter++,\n    callback: callback,\n    priorityLevel: priorityLevel,\n    startTime: startTime,\n    expirationTime: expirationTime,\n    sortIndex: -1\n  };\n\n  if (enableProfiling) {\n    newTask.isQueued = false;\n  }\n\n  if (startTime > currentTime) {\n    // This is a delayed task.\n    newTask.sortIndex = startTime;\n    push(timerQueue, newTask);\n\n    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n      // All tasks are delayed, and this is the task with the earliest delay.\n      if (isHostTimeoutScheduled) {\n        // Cancel an existing timeout.\n        cancelHostTimeout();\n      } else {\n        isHostTimeoutScheduled = true;\n      } // Schedule a timeout.\n\n\n      requestHostTimeout(handleTimeout, startTime - currentTime);\n    }\n  } else {\n    newTask.sortIndex = expirationTime;\n    push(taskQueue, newTask);\n\n    if (enableProfiling) {\n      markTaskStart(newTask, currentTime);\n      newTask.isQueued = true;\n    } // Schedule a host callback, if needed. If we're already performing work,\n    // wait until the next time we yield.\n\n\n    if (!isHostCallbackScheduled && !isPerformingWork) {\n      isHostCallbackScheduled = true;\n      requestHostCallback(flushWork);\n    }\n  }\n\n  return newTask;\n}\n\nfunction unstable_pauseExecution() {\n  isSchedulerPaused = true;\n}\n\nfunction unstable_continueExecution() {\n  isSchedulerPaused = false;\n\n  if (!isHostCallbackScheduled && !isPerformingWork) {\n    isHostCallbackScheduled = true;\n    requestHostCallback(flushWork);\n  }\n}\n\nfunction unstable_getFirstCallbackNode() {\n  return peek(taskQueue);\n}\n\nfunction unstable_cancelCallback(task) {\n  if (enableProfiling) {\n    if (task.isQueued) {\n      var currentTime = exports.unstable_now();\n      markTaskCanceled(task, currentTime);\n      task.isQueued = false;\n    }\n  } // Null out the callback to indicate the task has been canceled. (Can't\n  // remove from the queue because you can't remove arbitrary nodes from an\n  // array based heap, only the first one.)\n\n\n  task.callback = null;\n}\n\nfunction unstable_getCurrentPriorityLevel() {\n  return currentPriorityLevel;\n}\n\nfunction unstable_shouldYield() {\n  var currentTime = exports.unstable_now();\n  advanceTimers(currentTime);\n  var firstTask = peek(taskQueue);\n  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();\n}\n\nvar unstable_requestPaint = requestPaint;\nvar unstable_Profiling = enableProfiling ? {\n  startLoggingProfilingEvents: startLoggingProfilingEvents,\n  stopLoggingProfilingEvents: stopLoggingProfilingEvents,\n  sharedProfilingBuffer: sharedProfilingBuffer\n} : null;\n\nexports.unstable_ImmediatePriority = ImmediatePriority;\nexports.unstable_UserBlockingPriority = UserBlockingPriority;\nexports.unstable_NormalPriority = NormalPriority;\nexports.unstable_IdlePriority = IdlePriority;\nexports.unstable_LowPriority = LowPriority;\nexports.unstable_runWithPriority = unstable_runWithPriority;\nexports.unstable_next = unstable_next;\nexports.unstable_scheduleCallback = unstable_scheduleCallback;\nexports.unstable_cancelCallback = unstable_cancelCallback;\nexports.unstable_wrapCallback = unstable_wrapCallback;\nexports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\nexports.unstable_shouldYield = unstable_shouldYield;\nexports.unstable_requestPaint = unstable_requestPaint;\nexports.unstable_continueExecution = unstable_continueExecution;\nexports.unstable_pauseExecution = unstable_pauseExecution;\nexports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\nexports.unstable_Profiling = unstable_Profiling;\n  })();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}