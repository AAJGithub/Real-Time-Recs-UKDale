{"ast":null,"code":"// core keys merging algorithm. If previous render's keys are [a, b], and the\n// next render's [c, b, d], what's the final merged keys and ordering?\n// - c and a must both be before b\n// - b before d\n// - ordering between a and c ambiguous\n// this reduces to merging two partially ordered lists (e.g. lists where not\n// every item has a definite ordering, like comparing a and c above). For the\n// ambiguous ordering we deterministically choose to place the next render's\n// item after the previous'; so c after a\n// this is called a topological sorting. Except the existing algorithms don't\n// work well with js bc of the amount of allocation, and isn't optimized for our\n// current use-case bc the runtime is linear in terms of edges (see wiki for\n// meaning), which is huge when two lists have many common elements\n'use strict';\n\nexports.__esModule = true;\nexports['default'] = mergeDiff;\n\nfunction mergeDiff(prev, next, onRemove) {\n  // bookkeeping for easier access of a key's index below. This is 2 allocations +\n  // potentially triggering chrome hash map mode for objs (so it might be faster\n  var prevKeyIndex = {};\n\n  for (var i = 0; i < prev.length; i++) {\n    prevKeyIndex[prev[i].key] = i;\n  }\n\n  var nextKeyIndex = {};\n\n  for (var i = 0; i < next.length; i++) {\n    nextKeyIndex[next[i].key] = i;\n  } // first, an overly elaborate way of merging prev and next, eliminating\n  // duplicates (in terms of keys). If there's dupe, keep the item in next).\n  // This way of writing it saves allocations\n\n\n  var ret = [];\n\n  for (var i = 0; i < next.length; i++) {\n    ret[i] = next[i];\n  }\n\n  for (var i = 0; i < prev.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {\n      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't\n      // merge in keys that the user desires to kill\n      var fill = onRemove(i, prev[i]);\n\n      if (fill != null) {\n        ret.push(fill);\n      }\n    }\n  } // now all the items all present. Core sorting logic to have the right order\n\n\n  return ret.sort(function (a, b) {\n    var nextOrderA = nextKeyIndex[a.key];\n    var nextOrderB = nextKeyIndex[b.key];\n    var prevOrderA = prevKeyIndex[a.key];\n    var prevOrderB = prevKeyIndex[b.key];\n\n    if (nextOrderA != null && nextOrderB != null) {\n      // both keys in next\n      return nextKeyIndex[a.key] - nextKeyIndex[b.key];\n    } else if (prevOrderA != null && prevOrderB != null) {\n      // both keys in prev\n      return prevKeyIndex[a.key] - prevKeyIndex[b.key];\n    } else if (nextOrderA != null) {\n      // key a in next, key b in prev\n      // how to determine the order between a and b? We find a \"pivot\" (term\n      // abuse), a key present in both prev and next, that is sandwiched between\n      // a and b. In the context of our above example, if we're comparing a and\n      // d, b's (the only) pivot\n      for (var i = 0; i < next.length; i++) {\n        var pivot = next[i].key;\n\n        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n          continue;\n        }\n\n        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {\n          return -1;\n        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {\n          return 1;\n        }\n      } // pluggable. default to: next bigger than prev\n\n\n      return 1;\n    } // prevOrderA, nextOrderB\n\n\n    for (var i = 0; i < next.length; i++) {\n      var pivot = next[i].key;\n\n      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n        continue;\n      }\n\n      if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {\n        return 1;\n      } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {\n        return -1;\n      }\n    } // pluggable. default to: next bigger than prev\n\n\n    return -1;\n  });\n}\n\nmodule.exports = exports['default']; // to loop through and find a key's index each time), but I no longer care","map":{"version":3,"names":["exports","__esModule","mergeDiff","prev","next","onRemove","prevKeyIndex","i","length","key","nextKeyIndex","ret","Object","prototype","hasOwnProperty","call","fill","push","sort","a","b","nextOrderA","nextOrderB","prevOrderA","prevOrderB","pivot","module"],"sources":["/Users/janhavi/Real-Time-Recs-UKDale/FrontEnd/node_modules/react-timekeeper/node_modules/react-motion/lib/mergeDiff.js"],"sourcesContent":["\n\n// core keys merging algorithm. If previous render's keys are [a, b], and the\n// next render's [c, b, d], what's the final merged keys and ordering?\n\n// - c and a must both be before b\n// - b before d\n// - ordering between a and c ambiguous\n\n// this reduces to merging two partially ordered lists (e.g. lists where not\n// every item has a definite ordering, like comparing a and c above). For the\n// ambiguous ordering we deterministically choose to place the next render's\n// item after the previous'; so c after a\n\n// this is called a topological sorting. Except the existing algorithms don't\n// work well with js bc of the amount of allocation, and isn't optimized for our\n// current use-case bc the runtime is linear in terms of edges (see wiki for\n// meaning), which is huge when two lists have many common elements\n'use strict';\n\nexports.__esModule = true;\nexports['default'] = mergeDiff;\n\nfunction mergeDiff(prev, next, onRemove) {\n  // bookkeeping for easier access of a key's index below. This is 2 allocations +\n  // potentially triggering chrome hash map mode for objs (so it might be faster\n\n  var prevKeyIndex = {};\n  for (var i = 0; i < prev.length; i++) {\n    prevKeyIndex[prev[i].key] = i;\n  }\n  var nextKeyIndex = {};\n  for (var i = 0; i < next.length; i++) {\n    nextKeyIndex[next[i].key] = i;\n  }\n\n  // first, an overly elaborate way of merging prev and next, eliminating\n  // duplicates (in terms of keys). If there's dupe, keep the item in next).\n  // This way of writing it saves allocations\n  var ret = [];\n  for (var i = 0; i < next.length; i++) {\n    ret[i] = next[i];\n  }\n  for (var i = 0; i < prev.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {\n      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't\n      // merge in keys that the user desires to kill\n      var fill = onRemove(i, prev[i]);\n      if (fill != null) {\n        ret.push(fill);\n      }\n    }\n  }\n\n  // now all the items all present. Core sorting logic to have the right order\n  return ret.sort(function (a, b) {\n    var nextOrderA = nextKeyIndex[a.key];\n    var nextOrderB = nextKeyIndex[b.key];\n    var prevOrderA = prevKeyIndex[a.key];\n    var prevOrderB = prevKeyIndex[b.key];\n\n    if (nextOrderA != null && nextOrderB != null) {\n      // both keys in next\n      return nextKeyIndex[a.key] - nextKeyIndex[b.key];\n    } else if (prevOrderA != null && prevOrderB != null) {\n      // both keys in prev\n      return prevKeyIndex[a.key] - prevKeyIndex[b.key];\n    } else if (nextOrderA != null) {\n      // key a in next, key b in prev\n\n      // how to determine the order between a and b? We find a \"pivot\" (term\n      // abuse), a key present in both prev and next, that is sandwiched between\n      // a and b. In the context of our above example, if we're comparing a and\n      // d, b's (the only) pivot\n      for (var i = 0; i < next.length; i++) {\n        var pivot = next[i].key;\n        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n          continue;\n        }\n\n        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {\n          return -1;\n        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {\n          return 1;\n        }\n      }\n      // pluggable. default to: next bigger than prev\n      return 1;\n    }\n    // prevOrderA, nextOrderB\n    for (var i = 0; i < next.length; i++) {\n      var pivot = next[i].key;\n      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n        continue;\n      }\n      if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {\n        return 1;\n      } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {\n        return -1;\n      }\n    }\n    // pluggable. default to: next bigger than prev\n    return -1;\n  });\n}\n\nmodule.exports = exports['default'];\n// to loop through and find a key's index each time), but I no longer care"],"mappings":"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"},"metadata":{},"sourceType":"script"}