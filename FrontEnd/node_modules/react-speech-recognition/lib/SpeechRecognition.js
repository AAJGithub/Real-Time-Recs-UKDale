"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = SpeechRecognition;

var _react = _interopRequireWildcard(require("react"));

var _utils = require("./utils");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function SpeechRecognition(options) {
  var SpeechRecognitionInner = function SpeechRecognitionInner(WrappedComponent) {
    var BrowserSpeechRecognition = typeof window !== 'undefined' && (window.SpeechRecognition || window.webkitSpeechRecognition || window.mozSpeechRecognition || window.msSpeechRecognition || window.oSpeechRecognition);
    var recognition = BrowserSpeechRecognition ? new BrowserSpeechRecognition() : null;
    var browserSupportsSpeechRecognition = recognition !== null;
    var isAndroid = /(android)/i.test(navigator.userAgent);
    var listening;

    if (!browserSupportsSpeechRecognition || options && options.autoStart === false) {
      listening = false;
    } else {
      recognition.start();
      listening = true;
    }

    var pauseAfterDisconnect = false;
    var interimTranscript = '';
    var finalTranscript = '';
    return /*#__PURE__*/function (_Component) {
      _inherits(SpeechRecognitionContainer, _Component);

      var _super = _createSuper(SpeechRecognitionContainer);

      function SpeechRecognitionContainer(props) {
        var _this;

        _classCallCheck(this, SpeechRecognitionContainer);

        _this = _super.call(this, props);

        if (browserSupportsSpeechRecognition) {
          recognition.continuous = options.continuous !== false;
          recognition.interimResults = true;
          recognition.onresult = _this.updateTranscript.bind(_assertThisInitialized(_this));
          recognition.onend = _this.onRecognitionDisconnect.bind(_assertThisInitialized(_this));
        }

        _this.disconnect = _this.disconnect.bind(_assertThisInitialized(_this));
        _this.resetTranscript = _this.resetTranscript.bind(_assertThisInitialized(_this));
        _this.startListening = _this.startListening.bind(_assertThisInitialized(_this));
        _this.abortListening = _this.abortListening.bind(_assertThisInitialized(_this));
        _this.stopListening = _this.stopListening.bind(_assertThisInitialized(_this));

        if (isAndroid) {
          _this.updateFinalTranscript = (0, _utils.debounce)(_this.updateFinalTranscript.bind(_assertThisInitialized(_this)), 250, true);
        }

        _this.state = {
          interimTranscript: interimTranscript,
          finalTranscript: finalTranscript,
          listening: listening
        };
        return _this;
      }

      _createClass(SpeechRecognitionContainer, [{
        key: "disconnect",
        value: function disconnect(disconnectType) {
          if (recognition) {
            switch (disconnectType) {
              case 'ABORT':
                pauseAfterDisconnect = true;
                recognition.abort();
                break;

              case 'RESET':
                pauseAfterDisconnect = false;
                recognition.abort();
                break;

              case 'STOP':
              default:
                pauseAfterDisconnect = true;
                recognition.stop();
            }
          }
        }
      }, {
        key: "onRecognitionDisconnect",
        value: function onRecognitionDisconnect() {
          listening = false;

          if (pauseAfterDisconnect) {
            this.setState({
              listening: listening
            });
          } else if (recognition) {
            if (recognition.continuous) {
              this.startListening();
            } else {
              this.setState({
                listening: listening
              });
            }
          }

          pauseAfterDisconnect = false;
        }
      }, {
        key: "updateTranscript",
        value: function updateTranscript(event) {
          interimTranscript = '';

          for (var i = event.resultIndex; i < event.results.length; ++i) {
            if (event.results[i].isFinal && (!isAndroid || event.results[i][0].confidence > 0)) {
              this.updateFinalTranscript(event.results[i][0].transcript);
            } else {
              interimTranscript = this.concatTranscripts(interimTranscript, event.results[i][0].transcript);
            }
          }

          this.setState({
            finalTranscript: finalTranscript,
            interimTranscript: interimTranscript
          });
        }
      }, {
        key: "updateFinalTranscript",
        value: function updateFinalTranscript(newFinalTranscript) {
          finalTranscript = this.concatTranscripts(finalTranscript, newFinalTranscript);
        }
      }, {
        key: "concatTranscripts",
        value: function concatTranscripts() {
          for (var _len = arguments.length, transcriptParts = new Array(_len), _key = 0; _key < _len; _key++) {
            transcriptParts[_key] = arguments[_key];
          }

          return transcriptParts.map(function (t) {
            return t.trim();
          }).join(' ').trim();
        }
      }, {
        key: "resetTranscript",
        value: function resetTranscript() {
          interimTranscript = '';
          finalTranscript = '';
          this.disconnect('RESET');
          this.setState({
            interimTranscript: interimTranscript,
            finalTranscript: finalTranscript
          });
        }
      }, {
        key: "startListening",
        value: function startListening() {
          if (recognition && !listening) {
            if (!recognition.continuous) {
              this.resetTranscript();
            }

            try {
              recognition.start();
            } catch (DOMException) {// Tried to start recognition after it has already started - safe to swallow this error
            }

            listening = true;
            this.setState({
              listening: listening
            });
          }
        }
      }, {
        key: "abortListening",
        value: function abortListening() {
          listening = false;
          this.setState({
            listening: listening
          });
          this.disconnect('ABORT');
        }
      }, {
        key: "stopListening",
        value: function stopListening() {
          listening = false;
          this.setState({
            listening: listening
          });
          this.disconnect('STOP');
        }
      }, {
        key: "render",
        value: function render() {
          var transcript = this.concatTranscripts(finalTranscript, interimTranscript);
          return /*#__PURE__*/_react["default"].createElement(WrappedComponent, _extends({
            resetTranscript: this.resetTranscript,
            startListening: this.startListening,
            abortListening: this.abortListening,
            stopListening: this.stopListening,
            transcript: transcript,
            recognition: recognition,
            browserSupportsSpeechRecognition: browserSupportsSpeechRecognition
          }, this.state, this.props));
        }
      }]);

      return SpeechRecognitionContainer;
    }(_react.Component);
  };

  if (typeof options === 'function') {
    return SpeechRecognitionInner(options);
  } else {
    return SpeechRecognitionInner;
  }
}